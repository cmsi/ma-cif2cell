--- a/setup.py
+++ b/setup.py
@@ -28,7 +28,7 @@
     import CifFile
 except:
     try:
-        print "PyCifRW not found. Installing relevant modules."
+        print("PyCifRW not found. Installing relevant modules.")
         pycifrwmodulelist = ['CifFile','StarFile','YappsStarParser_1_0','YappsStarParser_1_1',
                              'YappsStarParser_DDLm','yapps3_compiled_rt']
         tar = tarfile.open('PyCifRW-3.3.tar.gz')
@@ -37,10 +37,10 @@
             shutil.copy("PyCifRW-3.3/"+mod+".py","./")
         shutil.rmtree('PyCifRW-3.3')
     except:
-        print "PyCifRW could neither be found nor installed. Please install PyCIFRW manually, "+\
+        print("PyCifRW could neither be found nor installed. Please install PyCIFRW manually, "+\
               "either from the\ncopy provided in this package or from: "+\
               "https://sourceforge.net/projects/pycifrw.berlios/\n"+\
-              "(or maybe you have it installed and just need to adjust your PYTHONPATH)."
+              "(or maybe you have it installed and just need to adjust your PYTHONPATH).")
         sys.exit(1)
 
 # Set up documentation
--- a/cif2cell
+++ b/cif2cell
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python3
 # Copyright 2010 Torbjorn Bjorkman
 # This file is part of cif2cell
 #
@@ -184,7 +184,7 @@
 
 # Print version number and exit
 if options.version:
-    print programname+" version "+version
+    print(programname+" version "+version)
     sys.exit(0)
 
 #############################################################
@@ -210,7 +210,7 @@
 if options.program:
     outputprogram = options.program.lower()
     if not outputprogram in outputprograms:
-        print "Error: Unknown output format: "+outputprogram
+        print("Error: Unknown output format: "+outputprogram)
         sys.exit(1)
     # Quantum Espresso is just an alias...
     if outputprogram == 'quantum-espresso':
@@ -338,7 +338,7 @@
     ## val_report = CifFile.ValidationResult(val_results)
     try:
         cf = CifFile.ReadCif(cif_file,grammar=cif_grammar)
-    except Exception, e:
+    except Exception as e:
         # test if data_ statement in the beginning is missing
         try:
             f = open(cif_file,'r')
@@ -419,7 +419,7 @@
 ref = ReferenceData()
 ref.getFromCIF(cb)
 if bibtexref:
-    print ref.bibtexref()
+    print(ref.bibtexref())
     sys.exit(0)
 # Get cell data
 cd = CellData()
@@ -431,13 +431,13 @@
     cd.coordepsilon = float(options.coordtol)
 try:
     cd.getFromCIF(cb)
-except PositionError, e:
+except PositionError as e:
     sys.stderr.write("***Error: cell setup: "+e.value+"\n")
     sys.exit(2)
-except CellError, e:
+except CellError as e:
     sys.stderr.write("***Error: cell setup: "+e.value+"\n")
     sys.exit(2)
-except SymmetryError, e:
+except SymmetryError as e:
     sys.stderr.write("***Error: cell setup: "+e.value+"\n")
     sys.exit(2)
 
@@ -449,10 +449,10 @@
         cd.primitive()
     else:
         cd.conventional()
-except SymmetryError, e:
+except SymmetryError as e:
     sys.stderr.write("***Error: cell setup: "+e.value+"\n")
     sys.exit(2)
-except CellError, e:
+except CellError as e:
     sys.stderr.write("***Error: cell setup: "+e.value+"\n")
     sys.exit(2)
 
@@ -477,7 +477,7 @@
         distr = "uniform"
     try:
         cd.randomDisplacements(float(options.randomdisp),distribution=distr)
-    except SetupError, e:
+    except SetupError as e:
         sys.stderr.write("***Error: random displacements: "+e.value+"\n")
         sys.exit(3)
     # Reset space group operations
@@ -488,8 +488,8 @@
 
 # Print cell
 if verbose or not options.program and not options.quiet:
-    print string.upper(programname)+" "+version
-    print datestring
+    print(string.upper(programname)+" "+version)
+    print(datestring)
     # Print compound
     compoundstring = "Output for "
     if ref.cpd == "" and ref.compound == "":
@@ -498,12 +498,12 @@
         compoundstring += ref.cpd
     if ref.compound != "":
         compoundstring += " ("+ref.compound+")"
-    print compoundstring
+    print(compoundstring)
     # Print database
-    print ref.databasestring
+    print(ref.databasestring)
     if cd.alloy and forcealloy and options.program:
-        print "\nEnforcing generation of file(s) for "+outputprogram+" for an alloy."
-    print "\n BIBLIOGRAPHIC INFORMATION"
+        print("\nEnforcing generation of file(s) for "+outputprogram+" for an alloy.")
+    print("\n BIBLIOGRAPHIC INFORMATION")
     refstrings = ref.referencestring().split()
     tmpstring = ""
     i = 0
@@ -512,31 +512,31 @@
             tmpstring += refstrings[i]+" "
             i += 1
         else:
-            print tmpstring
+            print(tmpstring)
             tmpstring = ""
     if tmpstring != "":
-        print tmpstring
-    print "\n INPUT CELL INFORMATION"
-    print "Symmetry information:"
+        print(tmpstring)
+    print("\n INPUT CELL INFORMATION")
+    print("Symmetry information:")
     if inputcell.HallSymbol != "":
-        print inputcell.crystal_system()[0].upper()+inputcell.crystal_system()[1:]+" crystal system."
-        print "Space group number     : ".rjust(2)+str(inputcell.spacegroupnr)
-        print "Hall symbol            : "+inputcell.HallSymbol
-        print "Hermann-Mauguin symbol : "+inputcell.HMSymbol
+        print(inputcell.crystal_system()[0].upper()+inputcell.crystal_system()[1:]+" crystal system.")
+        print("Space group number     : ".rjust(2)+str(inputcell.spacegroupnr))
+        print("Hall symbol            : "+inputcell.HallSymbol)
+        print("Hermann-Mauguin symbol : "+inputcell.HMSymbol)
     else:
-        print "No space group information found."
+        print("No space group information found.")
     # only print these if verbose
     if verbose:
-        print "Symmetry equivalent sites:"
+        print("Symmetry equivalent sites:")
         symops = list(inputcell.symops)
         symops.sort()
         for i in range(len(symops)):
-            print "%4i  %8s, %8s, %8s" % (i+1, symops[i].eqsite[0], symops[i].eqsite[1], symops[i].eqsite[2])
-    print "\nLattice parameters:"
+            print("%4i  %8s, %8s, %8s" % (i+1, symops[i].eqsite[0], symops[i].eqsite[1], symops[i].eqsite[2]))
+    print("\nLattice parameters:")
     tmpstring = ""
     for i in ["a", "b", "c"]:
         tmpstring += i.rjust(decpos)+" "
-    print tmpstring
+    print(tmpstring)
     formatstring = ""
     if options.printau:
         ## aprint = inputcell.ainit*angtobohr
@@ -554,12 +554,12 @@
         cprint = inputcell.c
     for i in range(3):
         formatstring = formatstring+decform+" "
-    print formatstring % (aprint, bprint, cprint)
+    print(formatstring % (aprint, bprint, cprint))
     tmpstring = ""
     for i in ["alpha", "beta", "gamma"]:
         tmpstring += i.rjust(decpos)+" "
-    print tmpstring
-    print formatstring % (inputcell.alpha, inputcell.beta, inputcell.gamma)
+    print(tmpstring)
+    print(formatstring % (inputcell.alpha, inputcell.beta, inputcell.gamma))
     ## print formatstring % (inputcell.alphainit, inputcell.betainit, inputcell.gammainit)
     # Pretty printing in columns that need to have variable width
     # w1 = width of the atomic species column
@@ -576,11 +576,11 @@
                 tmpstring1 = ""
                 tmpstring2 = ""
                 tmpstring3 = ""
-                for k,v in b.species.iteritems():
+                for k,v in b.species.items():
                     tmpstring1 += k+"/"
                     tmpstring2 += str(v).rstrip("0.")+"/"
                     # charge output
-                    for k2,v2 in inputcell.chargedict.iteritems():
+                    for k2,v2 in inputcell.chargedict.items():
                         if k2.strip(string.punctuation+string.digits) == k:
                             tmpstring3 += str(v2)+"/"
                 tmpstring1 = tmpstring1.rstrip("/")
@@ -604,7 +604,7 @@
             w4 = 0
     # Now for the output...
     tmpstring = "Representative sites :"
-    print tmpstring
+    print(tmpstring)
     siteheader = "Atom".ljust(w1)+" "
     if options.printcart:
         transmtx = []
@@ -628,17 +628,17 @@
             siteheader += "occ.".rjust(w3)
     if printcharges:
         siteheader += " "+"charge".rjust(w4)
-    print siteheader
+    print(siteheader)
     # Representative sites
     for i in range(len(inputcell.ineqsites)):
         tmpstring = ""
         occstring = ""
         chargestring = ""
-        for k,v in inputcell.occupations[i].iteritems():
+        for k,v in inputcell.occupations[i].items():
             tmpstring += k+"/"
             occstring += str(v)+"/"
             # charge output
-            for k2,v2 in inputcell.chargedict.iteritems():
+            for k2,v2 in inputcell.chargedict.items():
                 if k2.strip(string.punctuation+string.digits) == k:
                     chargestring += str(v2)+"/"
         tmpstring = tmpstring.rstrip("/")
@@ -650,27 +650,27 @@
             tmpstring += " "+occstring.rjust(w3)
         if printcharges:
             tmpstring += " "+chargestring.rjust(w4)
-        print tmpstring
+        print(tmpstring)
 
     # Output cell
-    print "\n OUTPUT CELL INFORMATION"
-    print "Symmetry information:"
+    print("\n OUTPUT CELL INFORMATION")
+    print("Symmetry information:")
     if cd.HallSymbol != "":
-        print cd.crystal_system()[0].upper()+cd.crystal_system()[1:]+" crystal system."
-        print "Space group number     : ".rjust(2)+str(cd.spacegroupnr)
-        print "Hall symbol            : "+cd.HallSymbol
-        print "Hermann-Mauguin symbol : "+cd.HMSymbol
+        print(cd.crystal_system()[0].upper()+cd.crystal_system()[1:]+" crystal system.")
+        print("Space group number     : ".rjust(2)+str(cd.spacegroupnr))
+        print("Hall symbol            : "+cd.HallSymbol)
+        print("Hermann-Mauguin symbol : "+cd.HMSymbol)
     else:
-        print "No space group information found."
+        print("No space group information found.")
     # only print these if verbose
     if verbose:
-        print "Symmetry equivalent sites:"
+        print("Symmetry equivalent sites:")
         symops = list(cd.symops)
         symops.sort()
         for i in range(len(symops)):
-            print "%4i  %8s, %8s, %8s" % (i+1, symops[i].eqsite[0], symops[i].eqsite[1], symops[i].eqsite[2])
+            print("%4i  %8s, %8s, %8s" % (i+1, symops[i].eqsite[0], symops[i].eqsite[1], symops[i].eqsite[2]))
 
-    print ""
+    print("")
     cd.printCell(printcart=options.printcart, printdigits=printdigits, printcharges=options.printcharges)
     # Print volume and density
     if options.printau:
@@ -679,15 +679,15 @@
     else:
         volume = cd.volume()*cd.lengthscale**3
         volstring = "A"
-    print "\nUnit cell volume  : "+decform%volume+" "+volstring+"^3"
+    print("\nUnit cell volume  : "+decform%volume+" "+volstring+"^3")
     try:
         weight = 0.0
         for a in cd.atomdata:
             for b in a:
-                for k,v in b.species.iteritems():
+                for k,v in b.species.items():
                     weight += ed.elementweight[k]*v
         density = weight/volume
-        print "Unit cell density : "+decform%density+" u/"+volstring+"^3 = "+decform%(density*uperautogpercm)+" g/cm^3"
+        print("Unit cell density : "+decform%density+" u/"+volstring+"^3 = "+decform%(density*uperautogpercm)+" g/cm^3")
     except:
         if not options.quiet:
             sys.stderr.write("***Warning: Error printing unit cell density.\n")
@@ -724,11 +724,11 @@
         celltransformation = safe_matheval(options.celltransformation)
     try:
         cd.transformCell(celltransformation)
-    except CellError, e:
+    except CellError as e:
         sys.stderr.write("***Error: Cell transformation: "+e.value+"\n")
         sys.exit(2)
     if verbose or not options.program and not options.quiet:
-        print "\n TRANSFORMED CELL"
+        print("\n TRANSFORMED CELL")
         cd.printCell(printcart=options.printcart, printdigits=printdigits, printcharges=options.printcharges)
     
 ##############################################
@@ -750,7 +750,7 @@
                 supercellmap[i].append(int(round(t2[i][j])))
     try:
         cd.getSuperCell(supercellmap,supercellvacuum,supercellprevactransvec,postvactransvec=supercellpostvactransvec,sort=supercellsort)
-    except CellError, e:
+    except CellError as e:
         sys.stderr.write("***Error: Supercell setup: "+e.value+"\n")
         sys.exit(2)
     # Randomly displace atoms if requested. This erases all symmetry operations.
@@ -761,41 +761,41 @@
             distr = "uniform"
         try:
             cd.randomDisplacements(float(options.randomdisp),distribution=distr)
-        except SetupError,e:
+        except SetupError as e:
             sys.stderr.write("***Error: random displacements: "+e.value+"\n")
             sys.exit(3)
         cd.symops = set([SymmetryOperation(['x','y','z'])])
     
     # Print supercell
     if verbose or not options.program and not options.quiet:
-        print "\n SUPERCELL INFORMATION"
+        print("\n SUPERCELL INFORMATION")
         cd.printCell(printcart=options.printcart, printdigits=printdigits, printcharges=options.printcharges)
         
 if printsymops or printseitz or verbose:
     # Print symmetry operations. Need to make list of it to control order.
     symoplist = sorted(list(cd.symops))
     if printsymops or verbose:
-        print "\nSymmetry operations : "
-        print "  3x3 rotation matrix +"
-        print "  3x1 translation vector"
+        print("\nSymmetry operations : ")
+        print( "  3x3 rotation matrix +")
+        print("  3x1 translation vector")
         i = 1
         for op in symoplist:
-            print "Operation "+str(i)
+            print("Operation "+str(i))
             for v in op.rotation:
-                print threedecs%(v[0],v[1],v[2])
-            print threedecs%(op.translation[0],op.translation[1],op.translation[2])
+                print(threedecs%(v[0],v[1],v[2]))
+            print(threedecs%(op.translation[0],op.translation[1],op.translation[2]))
             i += 1
     if printseitz:
-        print "\nSymmetry operations :"
-        print "  In Seitz matrix form"
+        print("\nSymmetry operations :")
+        print("  In Seitz matrix form")
         i = 1
         for op in symoplist:
-            print "Operation "+str(i)
+            print("Operation "+str(i))
             tmpstring = ""
             for j in range(3):
                 tmpstring += fourdecs%(op.rotation[j][0],op.rotation[j][1],op.rotation[j][2],op.translation[j])+"\n"
             tmpstring += fourdecs%(0,0,0,1)
-            print tmpstring
+            print(tmpstring)
             i += 1    
 
 # Remind that the result may be junk when using --force
@@ -897,17 +897,17 @@
 # Print output filename to screen
 if outputprogram !="":
     if (verbose or options.filenamequery) and outputfile != "":
-        print "Data will be written to the file "+outputfile
+        print("Data will be written to the file "+outputfile)
 
 ################################################################################################
 # stuff that should be printed irrespective of the verbose flag
 if cd.alloy and forcealloy and options.program and not verbose:
     tmpstring = "Enforcing file generation for alloy. "
     if outputprogram == 'bstr' or outputprogram == 'vasp' or outputprogram == 'cpmd':
-        print tmpstring
+        print(tmpstring)
     else:
         tmpstring += "Warning! The file(s) will be incomplete!"
-        print tmpstring
+        print(tmpstring)
     
 ################################################################################################
 # Stop here if no specific output was requested
@@ -916,12 +916,12 @@
 
 # Don't generate output for alloys (for most programs)
 if cd.alloy and not forcealloy and not (outputprogram in alloyprograms or outputprogram in vcaprograms):
-    print "Error: This system is an alloy, but "+codename[outputprogram]+" has no way of dealing with alloys.\n       Run again with --force-alloy (or --force) if you want to generate an (incomplete) output file anyway."
+    print("Error: This system is an alloy, but "+codename[outputprogram]+" has no way of dealing with alloys.\n       Run again with --force-alloy (or --force) if you want to generate an (incomplete) output file anyway.")
     sys.exit(17)
 # Deal with VCA
 if cd.alloy and outputprogram in vcaprograms:
     if not options.vca and not forcealloy:
-        print "Error: This system is an alloy. "+codename[outputprogram]+" can deal with some alloys using the virtual crystal approximation (VCA).\n       Run again with the flag --vca if you want to produce a VCA setup."
+        print("Error: This system is an alloy. "+codename[outputprogram]+" can deal with some alloys using the virtual crystal approximation (VCA).\n       Run again with the flag --vca if you want to produce a VCA setup.")
         sys.exit(17)
 vcawarning1 = False
 vcawarning2 = False
@@ -930,7 +930,7 @@
     groups = []
     for a in cd.atomdata:
         if len(a[0].species) > 1:
-            t = [ed.elementgroup[sp] for sp,conc in a[0].species.iteritems()]
+            t = [ed.elementgroup[sp] for sp,conc in a[0].species.items()]
             groups.append((min(t),max(t)))
             if len(a[0].species) > 2:
                 vcawarning1 = True
@@ -981,12 +981,12 @@
         a = Vector(cd.latticevectors[0].scalmult(cd.lengthscale))
         b = Vector(cd.latticevectors[1].scalmult(cd.lengthscale))
         c = Vector(cd.latticevectors[2].scalmult(cd.lengthscale))
-	cb['_cell_length_a'] = a.length()
-	cb['_cell_length_b'] = b.length()
-	cb['_cell_length_c'] = c.length()
-	cb['_cell_angle_alpha'] = acos(b.dot(c)/(b.length()*c.length()))*180/pi
-	cb['_cell_angle_beta'] = acos(a.dot(c)/(a.length()*c.length()))*180/pi
-	cb['_cell_angle_gamma'] = acos(b.dot(a)/(a.length()*b.length()))*180/pi
+        cb['_cell_length_a'] = a.length()
+        cb['_cell_length_b'] = b.length()
+        cb['_cell_length_c'] = c.length()
+        cb['_cell_angle_alpha'] = acos(b.dot(c)/(b.length()*c.length()))*180/pi
+        cb['_cell_angle_beta'] = acos(a.dot(c)/(a.length()*c.length()))*180/pi
+        cb['_cell_angle_gamma'] = acos(b.dot(a)/(a.length()*b.length()))*180/pi
         # Supercell may have broken symmetry, so just put P1
         cb['_space_group_IT_number'] = 1
         cb['_space_group_name_H-M_alt'] = "P1"
@@ -1570,7 +1570,7 @@
     f.close()
     # Print species order to screen if requested
     if options.vaspprintspcs:
-        print poscar.SpeciesOrder()
+        print(poscar.SpeciesOrder())
     # Set up all files?
     if setupall:
         # POTCAR
@@ -1582,7 +1582,7 @@
         if options.vasppppriority:
             prioritylist = options.vasppppriority.split(",")
             prioritylist.append("")
-            print prioritylist
+            print(prioritylist)
         else:
             try:
                 pl = os.environ['VASP_PP_PRIORITY']
--- a/uctools.py
+++ b/uctools.py
@@ -42,7 +42,8 @@
 from elementdata import *
 from random import random, gauss
 from fractions import gcd
-    
+from functools import reduce
+
 ################################################################################################
 class CellData(GeometryObject):
     """
@@ -281,7 +282,7 @@
         for a in self.atomdata:
             # Check concentration
             t = 0.0
-            for sp,conc in a[0].species.iteritems():
+            for sp,conc in a[0].species.items():
                 t += conc
             # Add vacuum spheres if partially empty
             if abs(1.0-t) > a[0].compeps:
@@ -620,10 +621,10 @@
             self.atomdata.append([])
             self.atomdata[i].append(AtomSite(position=self.ineqsites[i], label=self.sitelabels[i]))
             # Add species and occupations to atomdata
-            for k,v in self.occupations[i].iteritems():
+            for k,v in self.occupations[i].items():
                 self.atomdata[i][0].species[k] = v
                 # Add charge state
-                for k2,v2 in self.chargedict.iteritems():
+                for k2,v2 in self.chargedict.items():
                     if k2.strip(string.punctuation+string.digits) == k:
                         self.atomdata[i][0].charges[k] = v2
             ## self.atomdata[i][0].charge = self.charges[i]
@@ -723,7 +724,7 @@
         # Chemical content dictionary
         for a in self.atomdata:
             for b in a:
-                for k,v in b.species.iteritems():
+                for k,v in b.species.items():
                     if k in self.ChemicalComposition:
                         n = self.ChemicalComposition[k]
                         self.ChemicalComposition[k] = v+n
@@ -732,7 +733,7 @@
         if not self.alloy:
             L = self.ChemicalComposition.values()
             divisor = reduce(gcd,L)
-            for k,v in self.ChemicalComposition.iteritems():
+            for k,v in self.ChemicalComposition.items():
                 self.ChemicalComposition[k] = v/divisor
         # Number of atoms
         self.numberOfAtoms = self.natoms()
@@ -1087,7 +1088,7 @@
                 try:
                     eqsitestrs = eqsitedata.get(symopid)
                     # This if fixes a funny exception that can occur for the P1 space group.
-                    if type(eqsitestrs) == StringType:
+                    if type(eqsitestrs) == str:
                         eqsitestrs = [eqsitestrs]
                     eqsites = []
                     for i in range(len(eqsitestrs)):
@@ -1238,7 +1239,7 @@
                 sitexer = tmpdata.get('_atom_site_fract_x')
                 siteyer = tmpdata.get('_atom_site_fract_y')
                 sitezer = tmpdata.get('_atom_site_fract_z')
-            if (type(sitexer) == NoneType or type(siteyer) == NoneType or type(sitezer) == NoneType or \
+            if (type(sitexer) == type(None) or type(siteyer) == type(None) or type(sitezer) == type(None) or \
                 '?' in sitexer or '?' in siteyer or '?' in sitezer or \
                 '.' in sitexer or '.' in siteyer or '.' in sitezer):
                 if self.force:
@@ -1255,16 +1256,16 @@
         
         # Element names
         elementsymbs = tmpdata.get('_atom_site_type_symbol')
-        if type(elementsymbs) == NoneType or '?' in elementsymbs or '.' in elementsymbs:
+        if type(elementsymbs) == type(None) or '?' in elementsymbs or '.' in elementsymbs:
             elementsymbs = tmpdata.get('_atom_site_label')
-            if type(elementsymbs) == NoneType:
+            if type(elementsymbs) == type(None):
                 # Fill up with question marks if not found
                 sys.stderr.write("***Warning: Could not find element names.\n")
                 elementsymbs = ["??" for site in sitexer]
 
         # Site labels from _atom_site_label
         self.sitelabels = tmpdata.get('_atom_site_label')
-        if type(self.sitelabels) == NoneType:
+        if type(self.sitelabels) == type(None):
             # Fill up with question marks if not found
             if not self.quiet:
                 sys.stderr.write("Could not find site labels.\n")
@@ -1397,11 +1398,11 @@
                     tmpstring1 = ""
                     tmpstring2 = ""
                     tmpstring3 = ""
-                    for k,v in b.species.iteritems():
+                    for k,v in b.species.items():
                         tmpstring1 += k+"/"
                         tmpstring2 += str(v).rstrip("0.")+"/"
                         # charge output
-                        for k2,v2 in self.chargedict.iteritems():
+                        for k2,v2 in self.chargedict.items():
                             if k2.strip(string.punctuation+string.digits) == k:
                                 tmpstring3 += str(v2)+"/"
                     tmpstring1 = tmpstring1.rstrip("/")
@@ -1424,7 +1425,7 @@
             else:
                 w4 = 0
         # Start output
-        print "Bravais lattice vectors :"
+        print("Bravais lattice vectors :")
         # Site header
         siteheader = "Atom".ljust(w1)+" "
         if printcart:
@@ -1458,25 +1459,25 @@
         for i in range(3):
             formatstring = formatstring+decform+" "
         for i in range(3):
-            print formatstring % (self.latticevectors[i][0]*fact, self.latticevectors[i][1]*fact, self.latticevectors[i][2]*fact)
+            print(formatstring % (self.latticevectors[i][0]*fact, self.latticevectors[i][1]*fact, self.latticevectors[i][2]*fact))
         # Print out all sites
         tmpstring = "All sites, "
         if printcart:
             tmpstring += "(cartesian coordinates):"
         else:
             tmpstring += "(lattice coordinates):"
-        print tmpstring
-        print siteheader
+        print(tmpstring)
+        print(siteheader)
         for a in self.atomdata:
             for b in a:
                 spcsstring = ""
                 occstring = ""
                 chargestring = ""
-                for k,v in b.species.iteritems():
+                for k,v in b.species.items():
                     spcsstring += k+"/"
                     occstring += str(v).rstrip("0.")+"/"
                     # charge output
-                    for k2,v2 in self.chargedict.iteritems():
+                    for k2,v2 in self.chargedict.items():
                         if k2.strip(string.punctuation+string.digits) == k:
                             chargestring += str(v2)+"/"
                 spcsstring = spcsstring.rstrip("/")
@@ -1488,7 +1489,7 @@
                     tmpstring += " "+occstring.rjust(w3)
                 if printcharges:
                     tmpstring += " "+chargestring.rjust(w4)
-                print tmpstring
+                print(tmpstring)
 
 
 
@@ -1629,9 +1630,9 @@
     def getFromCIF(self, cifblock=None):
         # Get long compound name
         self.compound = cifblock.get('_chemical_name_systematic')
-        if type(self.compound) == NoneType:
+        if type(self.compound) == type(None):
             self.compound = cifblock.get('_chemical_name_mineral')
-            if type(self.compound) == NoneType:
+            if type(self.compound) == type(None):
                 self.compound = ""
         # Get short compound name
         try:
@@ -1641,9 +1642,9 @@
                 self.cpd = cifblock.get('_chemical_formula_sum')
             except:
                 self.cpd = ""
-        if type(self.compound) != StringType:
+        if type(self.compound) != str:
             self.compound = ""
-        if type(self.cpd) != StringType:
+        if type(self.cpd) != str:
             self.cpd = ""
         # Ty to set up chemical content set
         try:
@@ -1668,7 +1669,7 @@
             if not alloy:
                 L = self.ChemicalComposition.values()
                 divisor = reduce(gcd,L)
-                for k,v in self.ChemicalComposition.iteritems():
+                for k,v in self.ChemicalComposition.items():
                     self.ChemicalComposition[k] = v/divisor
         except:
             # If not found, then ignore, this is just to test internal consistency.
@@ -1678,7 +1679,7 @@
             # First all the standard ones
             try:
                 tmp = cifblock.get('_database_code_'+db)
-                if type(tmp) != NoneType:
+                if type(tmp) != type(None):
                     self.databasecode = tmp
                     self.database = self.databasenames[db]
                     self.databasestring = "CIF file exported from "+self.database+\
@@ -1698,7 +1699,7 @@
         if self.databasecode == "":
             try:
                 tmp = cifblock.get('_cod_database_code')
-                if type(tmp) != NoneType:
+                if type(tmp) != type(None):
                     self.databasecode = tmp
                     self.database = self.databasenames["COD"]
                     self.databasestring = "CIF file exported from "+self.database+\
@@ -1712,7 +1713,7 @@
         # Authors
             authorsloop = cifblock.GetLoop('_publ_author_name')
             self.authors = authorsloop.get('_publ_author_name')
-            if type(self.authors) == StringType:
+            if type(self.authors) == str:
                 self.authors = deletenewline(self.authors)
                 self.authorstring = self.authors
                 self.authors = self.authors.split(";")
@@ -1749,43 +1750,43 @@
                 # No primary reference found, using the first one.
                 i = 0
             # journal/book title
-            if type(references.get('_citation_journal_full')) != NoneType:
+            if type(references.get('_citation_journal_full')) != type(None):
                 self.journal = references.get('_citation_journal_full')[i]
             else:
-                if type(references.get('_citation_journal_abbrev')) != NoneType:
+                if type(references.get('_citation_journal_abbrev')) != type(None):
                     self.journal = references.get('_citation_journal_abbrev')[i]
                 else:
-                    if type(references.get('_citation_book_title')) != NoneType:
+                    if type(references.get('_citation_book_title')) != type(None):
                         self.journal = references.get('_citation_book_title')[i]
                     else:
                         self.journal = ""
             # volume
-            if type(references.get('_citation_journal_volume')) != NoneType:
+            if type(references.get('_citation_journal_volume')) != type(None):
                 self.volume = references.get('_citation_journal_volume')[i]
             else:
                 self.volume = ""
-            if type(self.volume) == NoneType:
+            if type(self.volume) == type(None):
                 self.volume = ""
             # first page
-            if type(references.get('_citation_page_first')) != NoneType:
+            if type(references.get('_citation_page_first')) != type(None):
                 self.firstpage = references.get('_citation_page_first')[i]
             else:
                 self.firstpage = ""
-            if type(self.firstpage) == NoneType:
+            if type(self.firstpage) == type(None):
                 self.firstpage = ""
             # last page
-            if type(references.get('_citation_page_last')) != NoneType:
+            if type(references.get('_citation_page_last')) != type(None):
                 self.lastpage = references.get('_citation_page_last')[i]
             else:
                 self.lastpage = ""
-            if type(self.lastpage) == NoneType:
+            if type(self.lastpage) == type(None):
                 self.lastpage = ""
             # year
-            if type(references.get('_citation_year')) != NoneType:
+            if type(references.get('_citation_year')) != type(None):
                 self.year = references.get('_citation_year')[i]
             else:
                 self.year = ""
-            if type(self.year) == NoneType:
+            if type(self.year) == type(None):
                 self.year = ""
         except KeyError:
             try:
--- a/spacegroupdata.py
+++ b/spacegroupdata.py
@@ -3090,7 +3090,7 @@
                   '-P 3* 2n' : '-R 3 2"c'}
 
 Hex2RhombHall = dict([])
-for k,v in Rhomb2HexHall.iteritems():
+for k,v in Rhomb2HexHall.items():
     Hex2RhombHall[v] = k
 
 # A. Perlov's numbering -> international tables numbers
--- a/ESPInterfaces.py
+++ b/ESPInterfaces.py
@@ -237,7 +237,7 @@
         atomlist = []
         for a in tmplist:
             if a.alloy():
-                for sp,occ in a.species.iteritems():
+                for sp,occ in a.species.items():
                     atomlist.append(AtomSite(position=a.position,species={sp : occ},charges={sp : a.charges[sp]}))
             else:
                 atomlist.append(a)
@@ -262,7 +262,7 @@
         ## filestring += "entry_count = 3\n"
         filestring += "entry_count = 6\n"
         for a in atomlist:
-                for sp,occ in a.species.iteritems():
+                for sp,occ in a.species.items():
                         if prevsp != sp:
                             filestring += "%i\n"%(int(round(ed.elementweight[sp])))
                             filestring += sp+"\n"
@@ -1288,7 +1288,7 @@
                 if self.cell.alloy and self.vca:
                     if len(b.species) > 1:
                         i = i + 1
-                        for sp,conc in b.species.iteritems():
+                        for sp,conc in b.species.items():
                             filestring += sp.ljust(2)+" "+str(pos)+"  MIXTURE:( %i %6.5f )"%(i,conc)
                     else:
                         filestring += b.spcstring().ljust(2)+" "+str(pos)
@@ -1305,7 +1305,7 @@
         species = set([])
         for a in self.cell.atomdata:
             if self.vca:
-                for sp,conc in a[0].species.iteritems():
+                for sp,conc in a[0].species.items():
                     species.add(sp)
             else:
                 species.add(a[0].spcstring())
@@ -1802,7 +1802,7 @@
         for a in self.cell.atomdata:
             for b in a:
                 filestring += +str(b.position)+" "
-                for k,v in b.species.iteritems():
+                for k,v in b.species.items():
                     filestring += k+"="+str(v)
         return filestring
         
@@ -1831,7 +1831,7 @@
         for a in self.cell.atomdata:
             for b in a:
                 if self.vca:
-                    for k,v in b.species.iteritems():
+                    for k,v in b.species.items():
                         tmp.add(k)
                 else:
                     tmp.add(b.spcstring())
@@ -1923,7 +1923,7 @@
             for a in self.cell.atomdata:
                 for b in a:
                     if self.vca:
-                        for k,v in b.species.iteritems():
+                        for k,v in b.species.items():
                             if k == sp:
                                 nsp += 1
                                 p = Vector(mvmult3(coordmat,mvmult3(transmtx,b.position)))
@@ -2050,7 +2050,7 @@
             tmp = set([])
             for a in self.cell.atomdata:
                 for b in a:
-                    for k,v in b.species.iteritems():
+                    for k,v in b.species.items():
                         tmp.add((k,v))
             tmp = list(tmp)
             self.vcaspecies = []
@@ -2063,7 +2063,7 @@
         for a in self.cell.atomdata:
             for b in a:
                 if self.vca:
-                    for k,v in b.species.iteritems():
+                    for k,v in b.species.items():
                         spcstr = k
                         if spcstr in speciesdict:
                             t = speciesdict[spcstr] + 1
@@ -2080,7 +2080,7 @@
         # species list in the same order as poscar
         self.species = []
         for s in poscarfile.species:
-            for k,v in speciesdict.iteritems():
+            for k,v in speciesdict.items():
                 if k == s:
                     self.species.append((k,v))
         # get potcar list
@@ -2096,7 +2096,7 @@
         # get maximal encut and number of electrons from potcars
         enmaxs = dict([])
         zvals = dict([])
-        for a,f in potcars.iteritems():
+        for a,f in potcars.items():
             potcar = open(f,"r")
             for line in potcar:
                 if search("ZVAL",line):
@@ -2106,7 +2106,7 @@
                 if search("END of PSCTR",line):
                     break
             potcar.close()
-        self.maxencut = max([k for v,k in enmaxs.iteritems()])
+        self.maxencut = max([k for v,k in enmaxs.items()])
         # do we suspect that this might be magnetic?
         self.magnetic = False
         self.magmomlist = []
@@ -2119,7 +2119,7 @@
         # Determine NBANDS
         nmag = sum([eval(i) for i in self.magmomlist])
         nelect = 0.0
-        for sp,z in zvals.iteritems():
+        for sp,z in zvals.items():
             for a in self.cell.atomdata:
                 for b in a:
                     if sp == b.spcstring():
@@ -2566,7 +2566,7 @@
                      self.cell.spacegroupsetting == 'C':
                 filestring += "3  monoclinic  primitive      2/m    C_2h\n"
             else:
-                print "xband only knows primitive and base-centered monoclinic settings!"
+                print("xband only knows primitive and base-centered monoclinic settings!")
                 sys.exit(43)
         elif self.cell.crystal_system() == 'orthorhombic':
             if self.cell.spacegroupsetting == 'P':
@@ -2579,7 +2579,7 @@
             elif self.cell.spacegroupsetting == "F":
                 filestring += "7  orthorombic face-centered  mmm    D_2h\n"
             else:
-                print "xband does not know %1s centering of an orthorhombic cell."%self.cell.spacegroupsetting
+                print("xband does not know %1s centering of an orthorhombic cell."%self.cell.spacegroupsetting)
                 sys.exit(43)
         elif self.cell.crystal_system() == "tetragonal":
             if self.cell.spacegroupsetting == "P":
@@ -2587,7 +2587,7 @@
             elif self.cell.spacegroupsetting == "I":
                 filestring += "9  tetragonal  body-centered  4/mmm  D_4h\n"
             else:
-                print "xband only knows primitive and body-centered tetragonal settings!"
+                print("xband only knows primitive and body-centered tetragonal settings!")
                 sys.exit(43)
         elif self.cell.crystal_system() == "trigonal":
             filestring += "10 trigonal    primitive      -3m    D_3d\n"
@@ -2601,7 +2601,7 @@
             elif self.cell.spacegroupsetting == "I":
                 filestring += "14 cubic       body-centered  m3m    O_h \n"
             else:
-                print "xband does not know %1s centering of a cubic cell."%self.cell.spacegroupsetting
+                print("xband does not know %1s centering of a cubic cell."%self.cell.spacegroupsetting)
                 sys.exit(43)
         filestring += "space group number (ITXC and AP)\n"
         filestring += "%5i%5i"%(self.cell.spacegroupnr,Number2AP[self.cell.spacegroupnr])+"\n"
@@ -2675,7 +2675,7 @@
         it = 0
         for a in self.cell.atomdata:
             corr = 0
-            for sp,conc in a[0].species.iteritems():
+            for sp,conc in a[0].species.items():
                 it += 1
                 filestring += " %2i%4i  %8s%5i%6.3f"%(it,ed.elementnr[sp],sp,len(a),conc)
                 iq -= corr*len(a)
@@ -2808,7 +2808,7 @@
             natom = 0
             conc.append([])
             for a in self.cell.atomdata:
-                for k,v in a[0].species.iteritems():
+                for k,v in a[0].species.items():
                     if a == b:
                         conc[i].append((ascii[natom],v))
                     else:
--- a/utils.py
+++ b/utils.py
@@ -368,7 +368,7 @@
         return tmp
     # Is there more than one species on this site?
     def alloy(self):
-        occsum = sum([v for k,v in self.species.iteritems()])
+        occsum = sum([v for k,v in self.species.items()])
         return len(self.species) > 1 or abs(occsum-1) > self.compeps
     # print site data in some informative way
     def __str__(self):
@@ -377,7 +377,7 @@
         # Position
         tmp += " %19.15f %19.15f %19.15f   "%(self.position[0],self.position[1],self.position[2])
         # occupancy
-        for k,v in self.species.iteritems():
+        for k,v in self.species.items():
             tmp += str(v)+"/"
         tmp = tmp.rstrip("/")
         return tmp
@@ -395,7 +395,7 @@
                 except:
                     pass
         else:
-            for sp,ch in self.charges.iteritems():
+            for sp,ch in self.charges.items():
                 try:
                     t.append(ElementData().IonicRadius[sp+str(ch)])
                 except:
